{"ast":null,"code":"var _jsxFileName = \"E:\\\\1\\\\curswork\\\\curswork\\\\src\\\\components\\\\SpellTooltip.tsx\";\nimport React from 'react';\nimport { Tooltip } from './Tooltip';\nimport spells from '../data/spells.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class SpellTooltip extends React.PureComponent {\n  render() {\n    const spell = spells[this.props.id.toString()];\n    if (!spell) {\n      return /*#__PURE__*/_jsxDEV(Tooltip, {\n        fixed: true,\n        ...this.props,\n        children: \"Spell not found :(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Tooltip, {\n      fixed: true,\n      title: spell.name,\n      icon: spell.icon,\n      ...this.props,\n      children: [spell.rank && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"tight\",\n        children: [\"Rank \", spell.rank]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"yellow\",\n        children: spell.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Tooltip","spells","jsxDEV","_jsxDEV","SpellTooltip","PureComponent","render","spell","props","id","toString","fixed","children","fileName","_jsxFileName","lineNumber","columnNumber","title","name","icon","rank","className","description"],"sources":["E:/1/curswork/curswork/src/components/SpellTooltip.tsx"],"sourcesContent":["import React from 'react'\nimport { Tooltip, Props as BaseProps } from './Tooltip'\nimport spells from '../data/spells.json'\n\ninterface Props extends BaseProps {\n  id: number\n}\n\nexport class SpellTooltip extends React.PureComponent<Props> {\n  render() {\n    const spell: SpellData = spells[this.props.id.toString()]\n    if (!spell) {\n      return <Tooltip fixed {...this.props}>Spell not found :(</Tooltip>\n    }\n  \n    return <Tooltip fixed title={spell.name} icon={spell.icon} {...this.props}>\n      {spell.rank && \n        <p className=\"tight\">Rank {spell.rank}</p>\n      }\n      <p className=\"yellow\">{spell.description}</p>\n    </Tooltip>\n  }\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAA4B,WAAW;AACvD,OAAOC,MAAM,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMxC,OAAO,MAAMC,YAAY,SAASL,KAAK,CAACM,aAAa,CAAQ;EAC3DC,MAAMA,CAAA,EAAG;IACP,MAAMC,KAAgB,GAAGN,MAAM,CAAC,IAAI,CAACO,KAAK,CAACC,EAAE,CAACC,QAAQ,CAAC,CAAC,CAAC;IACzD,IAAI,CAACH,KAAK,EAAE;MACV,oBAAOJ,OAAA,CAACH,OAAO;QAACW,KAAK;QAAA,GAAK,IAAI,CAACH,KAAK;QAAAI,QAAA,EAAE;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IACpE;IAEA,oBAAOb,OAAA,CAACH,OAAO;MAACW,KAAK;MAACM,KAAK,EAAEV,KAAK,CAACW,IAAK;MAACC,IAAI,EAAEZ,KAAK,CAACY,IAAK;MAAA,GAAK,IAAI,CAACX,KAAK;MAAAI,QAAA,GACtEL,KAAK,CAACa,IAAI,iBACTjB,OAAA;QAAGkB,SAAS,EAAC,OAAO;QAAAT,QAAA,GAAC,OAAK,EAACL,KAAK,CAACa,IAAI;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAE5Cb,OAAA;QAAGkB,SAAS,EAAC,QAAQ;QAAAT,QAAA,EAAEL,KAAK,CAACe;MAAW;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EACZ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}